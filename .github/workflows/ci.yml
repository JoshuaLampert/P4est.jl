name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'LICENSE.md'
      - 'README.md'
      - '.github/workflows/CompatHelper.yml'
      - '.github/workflows/DocPreviewCleanup.yml'
      - '.github/workflows/TagBot.yml'
  pull_request:
    paths-ignore:
      - 'LICENSE.md'
      - 'README.md'
      - '.github/workflows/CompatHelper.yml'
      - '.github/workflows/DocPreviewCleanup.yml'
      - '.github/workflows/TagBot.yml'
  workflow_dispatch:

# Cancel redundant CI tests automatically
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: ${{ matrix.os }} - ${{ matrix.p4est_test }} - Julia ${{ matrix.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'
          - '1'
          # - 'nightly'
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        arch:
          - x64
        p4est_test:
          - P4EST_JLL_MPI_DEFAULT
          - P4EST_JLL_MPI_CUSTOM
          # - P4EST_CUSTOM_MPI_DEFAULT # TODO: Clang, enable this
          - P4EST_CUSTOM_MPI_CUSTOM
        # Only selected tests on macOS and Windows, since not everything works everywhere yet
        include:
          - version: '1.6'
            os: macOS-latest
            arch: x64
            p4est_test: P4EST_JLL_MPI_DEFAULT
          - version: '1'
            os: macOS-latest
            arch: x64
            p4est_test: P4EST_JLL_MPI_DEFAULT
          - version: '1.6'
            os: windows-latest
            arch: x64
            p4est_test: P4EST_JLL_MPI_DEFAULT
          - version: '1'
            os: windows-latest
            arch: x64
            p4est_test: P4EST_JLL_MPI_DEFAULT
    steps:
      - uses: actions/checkout@v3
      - name: Set p4est release to run tests against
        run: |
          P4EST_RELEASE=2.3.1
          echo "P4EST_RELEASE=$P4EST_RELEASE" >> $GITHUB_ENV
          echo "P4EST_RELEASE=$P4EST_RELEASE"
        shell: bash
      - name: Set environment variables
        run: |
          echo "Setting variables for '${{ matrix.p4est_test }}'..."
          echo "P4EST_TEST=${{ matrix.p4est_test }}" >> $GITHUB_ENV
          echo "P4EST_TEST=${{ matrix.p4est_test }}"
          if [[ ${{ matrix.p4est_test }} == "P4EST_JLL_MPI_DEFAULT" ]] || [[ ${{ matrix.p4est_test }} == "P4EST_JLL_MPI_CUSTOM" ]]
          then
            echo "(no additional environment variables required)"
          elif [[ ${{ matrix.p4est_test }} == "P4EST_CUSTOM_MPI_DEFAULT" ]] || [[ ${{ matrix.p4est_test }} == "P4EST_CUSTOM_MPI_CUSTOM" ]]
          then
            P4EST_TMP=`pwd`/libp4est_tmp
            echo "P4EST_TMP=$P4EST_TMP" >> $GITHUB_ENV
            echo "P4EST_TMP=$P4EST_TMP"
            echo "P4EST_TEST_LIBP4EST=$P4EST_TMP/prefix/lib/libp4est.so" >> $GITHUB_ENV
            echo "$P4EST_TEST_LIBP4EST=$P4EST_TMP/prefix/lib/libp4est.so"
          # TODO: Clang; remove
          # elif [[ ${{ matrix.p4est_test }} == "P4EST_CUSTOM_USES_MPI" ]]; then
          #   echo "JULIA_P4EST_GENERATE_BINDINGS=yes" >> $GITHUB_ENV
          #   echo "JULIA_P4EST_GENERATE_BINDINGS=yes"
          #   P4EST_TMP=`pwd`/libp4est_tmp_uses_mpi
          #   echo "P4EST_TMP=$P4EST_TMP" >> $GITHUB_ENV
          #   echo "P4EST_TMP=$P4EST_TMP"
          #   echo "JULIA_P4EST_LIBRARY=$P4EST_TMP/prefix/lib/libp4est.so" >> $GITHUB_ENV
          #   echo "JULIA_P4EST_LIBRARY=$P4EST_TMP/prefix/lib/libp4est.so"
          #   echo "JULIA_P4EST_INCLUDE=$P4EST_TMP/prefix/include" >> $GITHUB_ENV
          #   echo "JULIA_P4EST_INCLUDE=$P4EST_TMP/prefix/include"
          #   echo "JULIA_P4EST_USES_MPI=yes" >> $GITHUB_ENV
          #   echo "JULIA_P4EST_USES_MPI=yes"
          #   echo "JULIA_P4EST_MPI_INCLUDE=/usr/include/x86_64-linux-gnu/mpich" >> $GITHUB_ENV
          #   echo "JULIA_P4EST_MPI_INCLUDE=/usr/include/x86_64-linux-gnu/mpich"
          else
            echo "ERROR: unknown test type ${{ matrix.p4est_test }}" >&2
            exit 1
          fi
          echo "Done."
        shell: bash
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
          show-versioninfo: true
      - uses: julia-actions/cache@v1
      - name: Install custom MPI library for testing
        run: |
          if [[ ${{ matrix.p4est_test }} == "P4EST_JLL_MPI_CUSTOM" ]] || [[ ${{ matrix.p4est_test }} == "P4EST_CUSTOM_MPI_CUSTOM" ]]
          then
            sudo apt-get install -y openmpi-bin libopenmpi-dev
          fi
        shell: bash
      - name: Install custom p4est library for testing
        run: |
          ./.ci_install_p4est.sh
        shell: bash
      - name: Configure MPI.jl
        shell: julia --color=yes {0}
        run: |
          @show pwd()
          include(joinpath("test", "configure_packages.jl"))
      - uses: julia-actions/julia-buildpkg@v1
        env:
          PYTHON: ""
      - uses: julia-actions/julia-runtest@v1
        env:
          PYTHON: ""
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./lcov.info # optional
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          # verbose: true # optional (default = false)
      # The standard setup of Coveralls is just annoying for parallel builds, see, e.g.,
      # https://github.com/trixi-framework/Trixi.jl/issues/691
      # https://github.com/coverallsapp/github-action/issues/47
      # https://github.com/coverallsapp/github-action/issues/67
      # This standard setup is reproduced below for completeness.
      # - uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     flag-name: run-${{ matrix.p4est_test }}-${{ matrix.os }}-${{ matrix.version }}-${{ matrix.arch }}-${{ github.run_id }}
      #     parallel: true
      #     path-to-lcov: ./lcov.info
      # Instead, we use a more tedious approach:
      # - Store all individual coverage files as artifacts (directly below)
      # - Download and merge individual coverage reports in another step
      # - Upload only the merged coverage report to Coveralls
      - shell: bash
        run: |
          cp ./lcov.info ./lcov-${{ matrix.p4est_test }}-${{ matrix.os }}-${{ matrix.version }}-${{ matrix.arch }}.info
      - uses: actions/upload-artifact@v3
        with:
          name: lcov-${{ matrix.p4est_test }}-${{ matrix.os }}-${{ matrix.version }}-${{ matrix.arch }}
          path: ./lcov-${{ matrix.p4est_test }}-${{ matrix.os }}-${{ matrix.version }}-${{ matrix.arch }}.info

  finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # The standard setup of Coveralls is just annoying for parallel builds, see, e.g.,
      # https://github.com/trixi-framework/Trixi.jl/issues/691
      # https://github.com/coverallsapp/github-action/issues/47
      # https://github.com/coverallsapp/github-action/issues/67
      # This standard setup is reproduced below for completeness.
      # - name: Coveralls Finished
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     parallel-finished: true
      # Instead, we use the more tedious approach described above.
      # At first, we check out the repository and download all artifacts
      # (and list files for debugging).
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - run: ls -R
      # Next, we merge the individual coverage files and upload
      # the combined results to Coveralls.
      - name: Merge lcov files using Coverage.jl
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.activate(temp=true)
          Pkg.add("Coverage")
          using Coverage
          coverage = LCOV.readfolder(".")
          for cov in coverage
            cov.filename = replace(cov.filename, "\\" => "/")
          end
          coverage = merge_coverage_counts(coverage)
          @show covered_lines, total_lines = get_summary(coverage)
          LCOV.writefile("./lcov.info", coverage)
      - uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./lcov.info
      # Upload merged coverage data as artifact for debugging
      - uses: actions/upload-artifact@v3
        with:
          name: lcov
          path: ./lcov.info
      # That's it
      - run: echo "Finished testing P4est"
